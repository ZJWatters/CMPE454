CISC/CMPE 454 Assignment 2

Due Friday Mar 24 at noon

You will implement parts of a physical simulator.

Step 0

  In Linux or MacOS, go into the 'linux' or 'macos' directory, compile
  the code with 'make', then run it from the command line as

    ./anim ../tests/test1.txt

  In Windows Visual Studio, double-click on the a2.vcxproj file, check
  that the command-line arguments in the Properties are

    ..\tests\test1.txt

  and then compile and run the code.

  NOTES:

    - If you do not include a command-line argument, the program will
      generate random spheres.

    - The last spheres generated are recorded in ../tests/lastSpheres.txt,
      which you can use for testing if you encounter an error in the
      randomly-generated spheres.

    - We will test on different inputs.

  You can drag the mouse with the left button down to move the
  viewpoint.  Dragging up/down with the *right* mouse button zooms
  in and out.

  Pressing 'p' pauses or unpauses.
  
  Pressing 'c' shows the line between each sphere and its
  'contactPoint', which will be useful for your debugging.  Between
  spheres the line goes only half-way to the contact point on the
  other sphere.

  Pressing '+' or '-' increases or decreases the simulation speed,
  which starts at half of real time.

Step 1

  [1 mark] Implement pointToEdgeDistance() in linalg.cpp according to
  the comments above that function.  


float pointToEdgeDistance( vec3 point, vec3 edgeTail, vec3 edgeHead, vec3 *closestPoint )

{
    // compute starting vectors
    vec3 edge = edgeHead - edgeTail;
    vec3 tailToPoint = point - edgeTail;
    vec3 headToPoint = point - edgeHead;
    
    // compute projection of headToPoint vector onto the edge vector
    float edgeLength = edge.length();
    float TdotE = edge*tailToPoint;
    float projectT_E = TdotE / (edgeLength * edgeLength);

    if (projectT_E < 0.0f) {
        *closestPoint = edgeTail;       // if projection is less than 0 edgeTail is closest
        return tailToPoint.length(); }
    else if (projectT_E > 1.0f) {
        *closestPoint = edgeHead;       // if projection is greater than 1 edgeHead is closest
        return headToPoint.length(); }
    else {
        vec3 closest = edgeTail + (projectT_E * edge);
        *closestPoint = closest;
        return (point-closest).length();
    }
}

Step 2

  [3 marks] Implement Sphere::distToRectangle() according to the
  comments in that function.

  At this point you should test your code by running it on test1.txt.
  Press 'c' to see the closest point to the sphere, which should be
  the bottom of the pit.

  Then move the sphere (in test1.txt) so that it is close to, but does
  not touch, one of the pit edges.  Press 'c' and verify that the
  closest point is on the edge.

  Then move the sphere outside one of the pit corner and test again
  that the closest point is now that corner.

  Get this code tested and working before proceeding.

Step 3

  [2 marks] Implement World::integrate() in world.cpp according to the
  comments in that function.

  Now test this with the original test1.txt to see that the sphere
  accelerates downward.

  /*
    y = yStart;
    yDeriv->x = y->v;
    yDeriv->q = y->q.derivative(y->w);
    yDeriv->v = GRAVITY_ACCEL;
    yDeriv->w = ZERO_ANG_VELOCITY;
    */

    // Integrate: Compute yEnd = yStart + deltaT * yDeriv
    //
    // Do this on the individual floats in 'y' and 'yDeriv'.  Do not
    // refer to the sphere states here.

    // [YOUR CODE HERE]

    /*
    yEnd->x = yStart->x + deltaT * yDeriv->x;
    yEnd->q = (deltaT * yDeriv->q) * yStart->q; // quaterions added by multiplying
    yEnd->v = yStart->v + deltaT * yDeriv->v;
    yEnd->w = yStart->w + deltaT * yDeriv->w;
    */

Step 4

  [3 marks] EFFICIENTY and CLEANLY implement the binary search in
  World::updateStateByDeltaT() according to the comments in that
  function.  At least one mark is for clean and efficient code.

 float mid = deltaT / 2;
        float left = 0.0;       // Interval always starts at 0? 
        float right = deltaT;

        // Binary search as long as the search interval is greater than MIN_DETLTA_T_FOR_COLLISONS
        while ((mid - left) >= MIN_DELTA_T_FOR_COLLISIONS) {
            integrate(yStart, yEnd, (mid-left), collisionAtEnd, &collisionSphere, &collisionObject);
            
            if (collisionAtEnd) {       // collison happens before mid point  
		    copyState(&shperes[0], yStart);    
                right = mid;
                mid = (right + left) / 2.0f;
            } else {                    // collision happens after mid point
		    copyState(&shperes[0], yEnd);    
                left = mid;
                mid = (right + left) / 2.0f;
        }

        actualDeltaT = mid;

Step 5

  [0 marks] Read and understand findCollisions().

Step 6.

  Implement sphere/sphere [3 marks] and sphere/rectangle [2 marks]
  collision resolution in World::resolveCollision() according to the
  comments in that function.

  Do sphere/rectangle collision first and test it with the original
  test1.txt.  Once that is working, move the sphere so that it hits an
  edge of the pit and test that the collision causes the sphere to
  move in the correct direction.

  Finally, implement sphere/sphere collision and test it with
  test2.txt.

  Then try several tests with many spheres by setting
  NUM_SPHERES_TO_GEN and not providing any command-line arguments.

To Hand In

  Make a directory called 'a3'.  In that directory, put

    - a README.txt file with your name(s), student number(s), and netID(s)

    - All of the *.h and *.cpp files, even if you did not modify them.

    - DO NOT INCLUDE ANY OTHER FILES.  YOU WILL LOSE MARKS OTHERWISE.

  Create a ZIP archive, named a3.zip, of the a3 directory and upload
  it to OnQ.

  IN GROUPS OF TWO, ONLY ONE PERSON SHOULD UPLOAD THE ASSIGNMENT.
